"use strict";export const Rule = validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/Rule","title":"Rule","type":"object","properties":{"action":{"$ref":"#/definitions/RuleAction","title":"action"},"condition":{"$ref":"#/definitions/RuleCondition","title":"condition"}},"additionalProperties":true,"required":["action","condition"]};const schema12 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RuleAction","title":"RuleAction","type":"object","properties":{"type":{"$ref":"#/definitions/RuleActionType","description":"The type of action to perform.","title":"type"}},"additionalProperties":false,"required":["type"]};const schema13 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RuleActionType","description":"Describes the kind of action to take if a given RuleCondition matches.","title":"RuleActionType","enum":["allow","block"],"type":"string"};function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/RuleAction" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.type === undefined) && (missing0 = "type")){validate11.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(key0 === "type")){validate11.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.type !== undefined){let data0 = data.type;if(typeof data0 !== "string"){validate11.errors = [{instancePath:instancePath+"/type",schemaPath:"#/definitions/RuleActionType/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data0 === "allow") || (data0 === "block"))){validate11.errors = [{instancePath:instancePath+"/type",schemaPath:"#/definitions/RuleActionType/enum",keyword:"enum",params:{allowedValues: schema13.enum},message:"must be equal to one of the allowed values"}];return false;}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}const schema14 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RuleCondition","title":"RuleCondition","type":"object","properties":{"requestDomains":{"description":"The rule will only match network requests when the domain matches one from the list of requestDomains.\nIf the list is omitted, the rule is applied to requests from all domains.","type":"array","items":{"type":"string","$ref":"#/definitions/Domain"},"title":"requestDomains"},"initiatorDomains":{"description":"The rule will only match network requests originating from the list of initiatorDomains.","type":"array","items":{"type":"string","$ref":"#/definitions/Domain"},"title":"initiatorDomains"},"urlFilter":{"description":"The pattern which is matched against the network request url.","type":"string","title":"urlFilter","pattern":"^[ -~]*$"},"isRegexFilter":{"description":"Whether to use regular expressions in the urlFilter.","type":"boolean","title":"isRegexFilter"},"requestMethods":{"description":"List of HTTP request methods which the rule can match.","type":"array","items":{"$ref":"#/definitions/RequestMethod"},"title":"requestMethods"},"resourceTypes":{"description":"List of resource types which the rule can match.\nAn empty list is not allowed.","type":"array","items":{"$ref":"#/definitions/ResourceType"},"title":"resourceTypes"}},"additionalProperties":false};const schema15 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/Domain","type":"string","minLength":1,"pattern":"^[!-~]+$"};const schema17 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RequestMethod","description":"This describes the HTTP request method of a network request.","title":"RequestMethod","enum":["connect","delete","get","head","options","patch","post","put"],"type":"string"};const schema18 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/ResourceType","description":"This describes the resource type of the network request.","title":"ResourceType","enum":["csp_report","font","image","main_frame","media","object","other","ping","script","stylesheet","sub_frame","websocket","xmlhttprequest"],"type":"string"};import func2 from "ajv/dist/runtime/ucs2length";const pattern0 = new RegExp("^[!-~]+$", "u");const pattern2 = new RegExp("^[ -~]*$", "u");function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/RuleCondition" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!((((((key0 === "requestDomains") || (key0 === "initiatorDomains")) || (key0 === "urlFilter")) || (key0 === "isRegexFilter")) || (key0 === "requestMethods")) || (key0 === "resourceTypes"))){validate13.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.requestDomains !== undefined){let data0 = data.requestDomains;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;if(typeof data1 !== "string"){validate13.errors = [{instancePath:instancePath+"/requestDomains/" + i0,schemaPath:"#/properties/requestDomains/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs5 = errors;if(errors === _errs5){if(typeof data1 === "string"){if(func2(data1) < 1){validate13.errors = [{instancePath:instancePath+"/requestDomains/" + i0,schemaPath:"#/definitions/Domain/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data1)){validate13.errors = [{instancePath:instancePath+"/requestDomains/" + i0,schemaPath:"#/definitions/Domain/pattern",keyword:"pattern",params:{pattern: "^[!-~]+$"},message:"must match pattern \""+"^[!-~]+$"+"\""}];return false;}}}else {validate13.errors = [{instancePath:instancePath+"/requestDomains/" + i0,schemaPath:"#/definitions/Domain/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate13.errors = [{instancePath:instancePath+"/requestDomains",schemaPath:"#/properties/requestDomains/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.initiatorDomains !== undefined){let data2 = data.initiatorDomains;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data2)){var valid3 = true;const len1 = data2.length;for(let i1=0; i1<len1; i1++){let data3 = data2[i1];const _errs10 = errors;if(typeof data3 !== "string"){validate13.errors = [{instancePath:instancePath+"/initiatorDomains/" + i1,schemaPath:"#/properties/initiatorDomains/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs11 = errors;if(errors === _errs11){if(typeof data3 === "string"){if(func2(data3) < 1){validate13.errors = [{instancePath:instancePath+"/initiatorDomains/" + i1,schemaPath:"#/definitions/Domain/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}else {if(!pattern0.test(data3)){validate13.errors = [{instancePath:instancePath+"/initiatorDomains/" + i1,schemaPath:"#/definitions/Domain/pattern",keyword:"pattern",params:{pattern: "^[!-~]+$"},message:"must match pattern \""+"^[!-~]+$"+"\""}];return false;}}}else {validate13.errors = [{instancePath:instancePath+"/initiatorDomains/" + i1,schemaPath:"#/definitions/Domain/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid3 = _errs10 === errors;if(!valid3){break;}}}else {validate13.errors = [{instancePath:instancePath+"/initiatorDomains",schemaPath:"#/properties/initiatorDomains/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.urlFilter !== undefined){let data4 = data.urlFilter;const _errs14 = errors;if(errors === _errs14){if(typeof data4 === "string"){if(!pattern2.test(data4)){validate13.errors = [{instancePath:instancePath+"/urlFilter",schemaPath:"#/properties/urlFilter/pattern",keyword:"pattern",params:{pattern: "^[ -~]*$"},message:"must match pattern \""+"^[ -~]*$"+"\""}];return false;}}else {validate13.errors = [{instancePath:instancePath+"/urlFilter",schemaPath:"#/properties/urlFilter/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.isRegexFilter !== undefined){const _errs16 = errors;if(typeof data.isRegexFilter !== "boolean"){validate13.errors = [{instancePath:instancePath+"/isRegexFilter",schemaPath:"#/properties/isRegexFilter/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.requestMethods !== undefined){let data6 = data.requestMethods;const _errs18 = errors;if(errors === _errs18){if(Array.isArray(data6)){var valid5 = true;const len2 = data6.length;for(let i2=0; i2<len2; i2++){let data7 = data6[i2];const _errs20 = errors;if(typeof data7 !== "string"){validate13.errors = [{instancePath:instancePath+"/requestMethods/" + i2,schemaPath:"#/definitions/RequestMethod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((((((data7 === "connect") || (data7 === "delete")) || (data7 === "get")) || (data7 === "head")) || (data7 === "options")) || (data7 === "patch")) || (data7 === "post")) || (data7 === "put"))){validate13.errors = [{instancePath:instancePath+"/requestMethods/" + i2,schemaPath:"#/definitions/RequestMethod/enum",keyword:"enum",params:{allowedValues: schema17.enum},message:"must be equal to one of the allowed values"}];return false;}var valid5 = _errs20 === errors;if(!valid5){break;}}}else {validate13.errors = [{instancePath:instancePath+"/requestMethods",schemaPath:"#/properties/requestMethods/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.resourceTypes !== undefined){let data8 = data.resourceTypes;const _errs23 = errors;if(errors === _errs23){if(Array.isArray(data8)){var valid7 = true;const len3 = data8.length;for(let i3=0; i3<len3; i3++){let data9 = data8[i3];const _errs25 = errors;if(typeof data9 !== "string"){validate13.errors = [{instancePath:instancePath+"/resourceTypes/" + i3,schemaPath:"#/definitions/ResourceType/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!(((((((((((((data9 === "csp_report") || (data9 === "font")) || (data9 === "image")) || (data9 === "main_frame")) || (data9 === "media")) || (data9 === "object")) || (data9 === "other")) || (data9 === "ping")) || (data9 === "script")) || (data9 === "stylesheet")) || (data9 === "sub_frame")) || (data9 === "websocket")) || (data9 === "xmlhttprequest"))){validate13.errors = [{instancePath:instancePath+"/resourceTypes/" + i3,schemaPath:"#/definitions/ResourceType/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"}];return false;}var valid7 = _errs25 === errors;if(!valid7){break;}}}else {validate13.errors = [{instancePath:instancePath+"/resourceTypes",schemaPath:"#/properties/resourceTypes/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs23 === errors;}else {var valid0 = true;}}}}}}}}else {validate13.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate13.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/Rule" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.action === undefined) && (missing0 = "action")) || ((data.condition === undefined) && (missing0 = "condition"))){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.action !== undefined){const _errs2 = errors;if(!(validate11(data.action, {instancePath:instancePath+"/action",parentData:data,parentDataProperty:"action",rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.condition !== undefined){const _errs3 = errors;if(!(validate13(data.condition, {instancePath:instancePath+"/condition",parentData:data,parentDataProperty:"condition",rootData}))){vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);errors = vErrors.length;}var valid0 = _errs3 === errors;}else {var valid0 = true;}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;}export const RuleSet = validate15;const schema19 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RuleSet","title":"RuleSet","type":"object","properties":{"name":{"type":"string","title":"name","minLength":1},"rules":{"type":"array","items":{"$ref":"#/definitions/Rule"},"title":"rules","minItems":1}},"additionalProperties":false,"required":["name","rules"]};function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/RuleSet" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.name === undefined) && (missing0 = "name")) || ((data.rules === undefined) && (missing0 = "rules"))){validate15.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((key0 === "name") || (key0 === "rules"))){validate15.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.name !== undefined){let data0 = data.name;const _errs2 = errors;if(errors === _errs2){if(typeof data0 === "string"){if(func2(data0) < 1){validate15.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate15.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.rules !== undefined){let data1 = data.rules;const _errs4 = errors;if(errors === _errs4){if(Array.isArray(data1)){if(data1.length < 1){validate15.errors = [{instancePath:instancePath+"/rules",schemaPath:"#/properties/rules/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];return false;}else {var valid1 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){const _errs6 = errors;if(!(validate10(data1[i0], {instancePath:instancePath+"/rules/" + i0,parentData:data1,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);errors = vErrors.length;}var valid1 = _errs6 === errors;if(!valid1){break;}}}}else {validate15.errors = [{instancePath:instancePath+"/rules",schemaPath:"#/properties/rules/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}}}}}else {validate15.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate15.errors = vErrors;return errors === 0;}export const RuleSets = validate17;const schema20 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RuleSets","type":"array","items":{"$ref":"#/definitions/RuleSet"}};function validate17(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/RuleSets" */;let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate15(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate17.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate17.errors = vErrors;return errors === 0;}