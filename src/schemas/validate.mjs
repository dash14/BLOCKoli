"use strict";export const Rule = validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/Rule","title":"Rule","type":"object","properties":{"id":{"type":"number","title":"id"},"action":{"$ref":"#/definitions/RuleAction","title":"action"},"condition":{"$ref":"#/definitions/RuleCondition","title":"condition"}},"additionalProperties":false,"required":["action","condition"]};const schema12 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RuleAction","title":"RuleAction","type":"object","properties":{"type":{"$ref":"#/definitions/RuleActionType","description":"The type of action to perform.","title":"type"}},"additionalProperties":false,"required":["type"]};const schema13 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RuleActionType","description":"Describes the kind of action to take if a given RuleCondition matches.","title":"RuleActionType","enum":["allow","block"],"type":"string"};function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/RuleAction" */;let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.type === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "type"},message:"must have required property '"+"type"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}for(const key0 in data){if(!(key0 === "type")){const err1 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}if(data.type !== undefined){let data0 = data.type;if(typeof data0 !== "string"){const err2 = {instancePath:instancePath+"/type",schemaPath:"#/definitions/RuleActionType/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(!((data0 === "allow") || (data0 === "block"))){const err3 = {instancePath:instancePath+"/type",schemaPath:"#/definitions/RuleActionType/enum",keyword:"enum",params:{allowedValues: schema13.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}}else {const err4 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}validate11.errors = vErrors;return errors === 0;}const schema14 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RuleCondition","title":"RuleCondition","type":"object","properties":{"requestDomains":{"description":"The rule will only match network requests when the domain matches one from the list of requestDomains.\nIf the list is omitted, the rule is applied to requests from all domains.","type":"array","items":{"type":"string","$ref":"#/definitions/Domain"},"title":"requestDomains"},"initiatorDomains":{"description":"The rule will only match network requests originating from the list of initiatorDomains.","type":"array","items":{"type":"string","$ref":"#/definitions/Domain"},"title":"initiatorDomains"},"urlFilter":{"description":"The pattern which is matched against the network request url.","type":"string","title":"urlFilter","pattern":"^[ -~]*$"},"isRegexFilter":{"description":"Whether to use regular expressions in the urlFilter.","type":"boolean","title":"isRegexFilter"},"requestMethods":{"description":"List of HTTP request methods which the rule can match.","type":"array","items":{"$ref":"#/definitions/RequestMethod"},"title":"requestMethods"},"resourceTypes":{"description":"List of resource types which the rule can match.\nAn empty list is not allowed.","type":"array","items":{"$ref":"#/definitions/ResourceType"},"title":"resourceTypes"}},"additionalProperties":false};const schema15 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/Domain","type":"string","minLength":1,"pattern":"^[!-~]+$"};const schema17 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RequestMethod","description":"This describes the HTTP request method of a network request.","title":"RequestMethod","enum":["connect","delete","get","head","options","patch","post","put"],"type":"string"};const schema18 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/ResourceType","description":"This describes the resource type of the network request.","title":"ResourceType","enum":["csp_report","font","image","main_frame","media","object","other","ping","script","stylesheet","sub_frame","websocket","xmlhttprequest"],"type":"string"};import func2 from "ajv/dist/runtime/ucs2length";const pattern0 = new RegExp("^[!-~]+$", "u");const pattern2 = new RegExp("^[ -~]*$", "u");function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/RuleCondition" */;let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){for(const key0 in data){if(!((((((key0 === "requestDomains") || (key0 === "initiatorDomains")) || (key0 === "urlFilter")) || (key0 === "isRegexFilter")) || (key0 === "requestMethods")) || (key0 === "resourceTypes"))){const err0 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}if(data.requestDomains !== undefined){let data0 = data.requestDomains;if(Array.isArray(data0)){const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];if(typeof data1 !== "string"){const err1 = {instancePath:instancePath+"/requestDomains/" + i0,schemaPath:"#/properties/requestDomains/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(typeof data1 === "string"){if(func2(data1) < 1){const err2 = {instancePath:instancePath+"/requestDomains/" + i0,schemaPath:"#/definitions/Domain/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(!pattern0.test(data1)){const err3 = {instancePath:instancePath+"/requestDomains/" + i0,schemaPath:"#/definitions/Domain/pattern",keyword:"pattern",params:{pattern: "^[!-~]+$"},message:"must match pattern \""+"^[!-~]+$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}else {const err4 = {instancePath:instancePath+"/requestDomains/" + i0,schemaPath:"#/definitions/Domain/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}}else {const err5 = {instancePath:instancePath+"/requestDomains",schemaPath:"#/properties/requestDomains/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}if(data.initiatorDomains !== undefined){let data2 = data.initiatorDomains;if(Array.isArray(data2)){const len1 = data2.length;for(let i1=0; i1<len1; i1++){let data3 = data2[i1];if(typeof data3 !== "string"){const err6 = {instancePath:instancePath+"/initiatorDomains/" + i1,schemaPath:"#/properties/initiatorDomains/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}if(typeof data3 === "string"){if(func2(data3) < 1){const err7 = {instancePath:instancePath+"/initiatorDomains/" + i1,schemaPath:"#/definitions/Domain/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}if(!pattern0.test(data3)){const err8 = {instancePath:instancePath+"/initiatorDomains/" + i1,schemaPath:"#/definitions/Domain/pattern",keyword:"pattern",params:{pattern: "^[!-~]+$"},message:"must match pattern \""+"^[!-~]+$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}else {const err9 = {instancePath:instancePath+"/initiatorDomains/" + i1,schemaPath:"#/definitions/Domain/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}}else {const err10 = {instancePath:instancePath+"/initiatorDomains",schemaPath:"#/properties/initiatorDomains/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}if(data.urlFilter !== undefined){let data4 = data.urlFilter;if(typeof data4 === "string"){if(!pattern2.test(data4)){const err11 = {instancePath:instancePath+"/urlFilter",schemaPath:"#/properties/urlFilter/pattern",keyword:"pattern",params:{pattern: "^[ -~]*$"},message:"must match pattern \""+"^[ -~]*$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}else {const err12 = {instancePath:instancePath+"/urlFilter",schemaPath:"#/properties/urlFilter/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}if(data.isRegexFilter !== undefined){if(typeof data.isRegexFilter !== "boolean"){const err13 = {instancePath:instancePath+"/isRegexFilter",schemaPath:"#/properties/isRegexFilter/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}if(data.requestMethods !== undefined){let data6 = data.requestMethods;if(Array.isArray(data6)){const len2 = data6.length;for(let i2=0; i2<len2; i2++){let data7 = data6[i2];if(typeof data7 !== "string"){const err14 = {instancePath:instancePath+"/requestMethods/" + i2,schemaPath:"#/definitions/RequestMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}if(!((((((((data7 === "connect") || (data7 === "delete")) || (data7 === "get")) || (data7 === "head")) || (data7 === "options")) || (data7 === "patch")) || (data7 === "post")) || (data7 === "put"))){const err15 = {instancePath:instancePath+"/requestMethods/" + i2,schemaPath:"#/definitions/RequestMethod/enum",keyword:"enum",params:{allowedValues: schema17.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}}else {const err16 = {instancePath:instancePath+"/requestMethods",schemaPath:"#/properties/requestMethods/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}if(data.resourceTypes !== undefined){let data8 = data.resourceTypes;if(Array.isArray(data8)){const len3 = data8.length;for(let i3=0; i3<len3; i3++){let data9 = data8[i3];if(typeof data9 !== "string"){const err17 = {instancePath:instancePath+"/resourceTypes/" + i3,schemaPath:"#/definitions/ResourceType/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}if(!(((((((((((((data9 === "csp_report") || (data9 === "font")) || (data9 === "image")) || (data9 === "main_frame")) || (data9 === "media")) || (data9 === "object")) || (data9 === "other")) || (data9 === "ping")) || (data9 === "script")) || (data9 === "stylesheet")) || (data9 === "sub_frame")) || (data9 === "websocket")) || (data9 === "xmlhttprequest"))){const err18 = {instancePath:instancePath+"/resourceTypes/" + i3,schemaPath:"#/definitions/ResourceType/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}}else {const err19 = {instancePath:instancePath+"/resourceTypes",schemaPath:"#/properties/resourceTypes/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}}else {const err20 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}validate13.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/Rule" */;let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.action === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "action"},message:"must have required property '"+"action"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.condition === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "condition"},message:"must have required property '"+"condition"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}for(const key0 in data){if(!(((key0 === "id") || (key0 === "action")) || (key0 === "condition"))){const err2 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}if(data.id !== undefined){let data0 = data.id;if(!((typeof data0 == "number") && (isFinite(data0)))){const err3 = {instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}if(data.action !== undefined){if(!(validate11(data.action, {instancePath:instancePath+"/action",parentData:data,parentDataProperty:"action",rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}}if(data.condition !== undefined){if(!(validate13(data.condition, {instancePath:instancePath+"/condition",parentData:data,parentDataProperty:"condition",rootData}))){vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);errors = vErrors.length;}}}else {const err4 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}validate10.errors = vErrors;return errors === 0;}export const RuleSet = validate15;const schema19 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RuleSet","title":"RuleSet","type":"object","properties":{"name":{"type":"string","title":"name","minLength":1},"rules":{"type":"array","items":{"$ref":"#/definitions/Rule"},"title":"rules","minItems":1}},"additionalProperties":false,"required":["name","rules"]};function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/RuleSet" */;let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.name === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.rules === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "rules"},message:"must have required property '"+"rules"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}for(const key0 in data){if(!((key0 === "name") || (key0 === "rules"))){const err2 = {instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}if(data.name !== undefined){let data0 = data.name;if(typeof data0 === "string"){if(func2(data0) < 1){const err3 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}else {const err4 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}if(data.rules !== undefined){let data1 = data.rules;if(Array.isArray(data1)){if(data1.length < 1){const err5 = {instancePath:instancePath+"/rules",schemaPath:"#/properties/rules/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}const len0 = data1.length;for(let i0=0; i0<len0; i0++){if(!(validate10(data1[i0], {instancePath:instancePath+"/rules/" + i0,parentData:data1,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate10.errors : vErrors.concat(validate10.errors);errors = vErrors.length;}}}else {const err6 = {instancePath:instancePath+"/rules",schemaPath:"#/properties/rules/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}}else {const err7 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}validate15.errors = vErrors;return errors === 0;}export const RuleSets = validate17;const schema20 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"#/definitions/RuleSets","type":"array","items":{"$ref":"#/definitions/RuleSet"}};function validate17(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/RuleSets" */;let vErrors = null;let errors = 0;if(Array.isArray(data)){const len0 = data.length;for(let i0=0; i0<len0; i0++){if(!(validate15(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);errors = vErrors.length;}}}else {const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}validate17.errors = vErrors;return errors === 0;}